<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Products - Exclusive Design</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }
    
    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
      overflow-x: hidden;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    /* Enhanced Header */
    header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      align-items: center;
      animation: slideDown 0.8s ease-out;
      position: relative;
      overflow: hidden;
      gap: 20px;
    }
    
    header::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
      animation: shimmer 3s infinite;
    }
    
    header h1 {
      font-size: clamp(2rem, 4vw, 3rem);
      font-weight: 700;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      position: relative;
      z-index: 1;
      margin-bottom: 0;
    }
    
    /* Enhanced Search Container */
    .search-container {
      display: flex;
      flex-direction: column;
      gap: 15px;
      width: 100%;
      max-width: 600px;
      position: relative;
      z-index: 1;
    }
    
    .search-bar {
      display: flex;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 50px;
      overflow: hidden;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
    
    .search-bar:focus-within {
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.2);
    }
    
    .search-input {
      flex: 1;
      padding: 15px 25px;
      border: none;
      outline: none;
      font-size: clamp(0.9rem, 2vw, 1rem);
      background: transparent;
      color: #333;
    }
    
    .search-input::placeholder {
      color: #999;
    }
    
    .search-btn {
      padding: 15px 25px;
      border: none;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 1.1rem;
    }
    
    .search-btn:hover {
      background: linear-gradient(135deg, #5a6fd8, #6a5acd);
      transform: scale(1.05);
    }
    
    .search-icon {
      font-size: 1.2rem;
    }
    
    .search-filters {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .filter-input {
      padding: 10px 15px;
      border: 2px solid rgba(102, 126, 234, 0.2);
      border-radius: 25px;
      outline: none;
      font-size: 0.9rem;
      background: rgba(255, 255, 255, 0.9);
      color: #333;
      transition: all 0.3s ease;
      min-width: 120px;
    }
    
    .filter-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .filter-btn, .clear-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .filter-btn {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
    }
    
    .filter-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
    
    .clear-btn {
      background: transparent;
      color: #667eea;
      border: 2px solid #667eea;
    }
    
    .clear-btn:hover {
      background: #667eea;
      color: white;
      transform: translateY(-2px);
    }
    
    /* Enhanced Cart Link */
    .cart-link {
      position: relative;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .cart-badge {
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: bold;
      animation: pulse 2s infinite;
    }
    
    /* Enhanced Search Results Header */
    .search-results-header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      text-align: center;
      animation: slideDown 0.6s ease-out;
    }
    
    .search-results-header h2 {
      font-size: clamp(1.5rem, 3vw, 2rem);
      margin-bottom: 10px;
      color: #333;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .search-results-header p {
      color: #666;
      margin-bottom: 20px;
      font-size: clamp(1rem, 2vw, 1.1rem);
    }
    
    .clear-search-btn {
      padding: 12px 25px;
      border: none;
      background: linear-gradient(135deg, #6c757d, #495057);
      color: white;
      border-radius: 25px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 3px 10px rgba(108, 117, 125, 0.3);
    }
    
    .clear-search-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(108, 117, 125, 0.4);
    }
    
    /* Enhanced Product Actions */
    .add-to-cart-btn {
      position: relative;
      overflow: hidden;
    }
    
    .btn-loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    .add-to-cart-btn.loading .btn-text {
      opacity: 0;
    }
    
    .add-to-cart-btn.loading .btn-loading {
      display: inline-block !important;
    }
    
    .add-to-cart-btn.success {
      background: linear-gradient(135deg, #28a745, #20c997) !important;
      animation: successPulse 0.6s ease-out;
    }
    
    @keyframes successPulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    .desktop-nav {
      display: flex;
      gap: 30px;
      position: relative;
      z-index: 1;
    }
    
    .desktop-nav a {
      text-decoration: none;
      color: #667eea;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 50px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .desktop-nav a::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }
    
    .desktop-nav a:hover::before {
      left: 100%;
    }
    
    .desktop-nav a:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }
    
    /* Enhanced Mobile Menu Button */
    .menu-toggle {
      display: none;
      flex-direction: column;
      justify-content: space-between;
      width: 40px;
      height: 30px;
      cursor: pointer;
      z-index: 1001;
      position: relative;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .menu-toggle:hover {
      transform: scale(1.1) rotate(5deg);
    }
    
    .menu-toggle span {
      display: block;
      height: 4px;
      width: 100%;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 3px;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      transform-origin: center;
    }
    
    .menu-toggle span:nth-child(1) {
      transform-origin: top left;
    }
    
    .menu-toggle span:nth-child(3) {
      transform-origin: bottom left;
    }
    
    .menu-toggle.active span:nth-child(1) {
      transform: rotate(45deg) translate(3px, -3px);
      background: #dc3545;
      box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
    }
    
    .menu-toggle.active span:nth-child(2) {
      opacity: 0;
      transform: translateX(-30px) scale(0.5);
    }
    
    .menu-toggle.active span:nth-child(3) {
      transform: rotate(-45deg) translate(3px, 3px);
      background: #dc3545;
      box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
    }
    
    /* Enhanced Mobile Navigation */
    #mobileNav {
      position: fixed;
      top: 0;
      right: -100%;
      width: 85%;
      max-width: 450px;
      height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      flex-direction: column;
      align-items: flex-start;
      padding: 120px 40px 40px;
      transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: -15px 0 40px rgba(0, 0, 0, 0.3);
      z-index: 1000;
      backdrop-filter: blur(25px);
      overflow-y: auto;
    }
    
    #mobileNav.active {
      right: 0;
    }
    
    #mobileNav a {
      margin: 20px 0;
      font-size: 1.4rem;
      color: white;
      text-decoration: none;
      padding: 18px 0;
      border-bottom: 2px solid rgba(255, 255, 255, 0.1);
      width: 100%;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
    }
    
    #mobileNav a::before {
      content: '';
      position: absolute;
      left: -100%;
      top: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transition: left 0.5s ease;
    }
    
    #mobileNav a:hover::before {
      left: 100%;
    }
    
    #mobileNav a:hover {
      color: #f8f9fa;
      padding-left: 15px;
      transform: translateX(10px);
      border-bottom-color: rgba(255, 255, 255, 0.3);
    }
    
    /* Enhanced Products Grid */
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: clamp(25px, 3vw, 40px);
      margin-top: 40px;
      animation: fadeInUp 1s ease-out 0.3s both;
    }
    
    .product-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      overflow: hidden;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      opacity: 0;
      transform: translateY(50px);
      animation: fadeInUp 0.8s ease-out both;
    }
    
    .product-card.visible {
      opacity: 1;
      transform: translateY(0);
    }
    
    .product-card:hover {
      transform: translateY(-15px) scale(1.02);
      box-shadow: 0 25px 60px rgba(0, 0, 0, 0.2);
    }
    
    .product-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      transform: scaleX(0);
      transition: transform 0.4s ease;
      z-index: 2;
    }
    
    .product-card:hover::before {
      transform: scaleX(1);
    }
    
    /* Enhanced Product Image Container */
    .product-image-container {
      position: relative;
      height: 280px;
      overflow: hidden;
      background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    }
    
    .product-image-container img,
    .product-image-container video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      z-index: 1;
    }
    
    .product-card:hover .product-image-container img,
    .product-card:hover .product-image-container video {
      transform: scale(1.1) rotate(2deg);
    }
    
    /* Enhanced Image Overlay */
    .image-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.8), rgba(118, 75, 162, 0.8));
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: all 0.4s ease;
      z-index: 2;
    }
    
    .product-card:hover .image-overlay {
      opacity: 1;
    }
    
    .overlay-content {
      text-align: center;
      color: white;
      transform: translateY(20px);
      transition: transform 0.4s ease;
    }
    
    .product-card:hover .overlay-content {
      transform: translateY(0);
    }
    
    .overlay-content h3 {
      font-size: 1.5rem;
      margin-bottom: 15px;
      font-weight: 600;
    }
    
    .overlay-content p {
      font-size: 1rem;
      opacity: 0.9;
      margin-bottom: 20px;
    }
    
    /* Enhanced Product Content */
    .product-content {
      padding: clamp(20px, 3vw, 30px);
      position: relative;
    }
    
    .product-content h3 {
      font-size: clamp(1.3rem, 2.5vw, 1.6rem);
      margin-bottom: 15px;
      color: #333;
      font-weight: 600;
      line-height: 1.3;
    }
    
    .product-description {
      color: #666;
      margin-bottom: 20px;
      line-height: 1.6;
      font-size: clamp(0.9rem, 2vw, 1rem);
    }
    
    .product-price {
      font-size: clamp(1.5rem, 3vw, 2rem);
      font-weight: 700;
      color: #667eea;
      margin-bottom: 25px;
      text-align: center;
      position: relative;
    }
    
    .product-price::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 40px;
      height: 2px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 1px;
    }
    
    /* Enhanced Action Buttons */
    .product-actions {
      display: flex;
      gap: 15px;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .btn {
      padding: clamp(12px, 2vw, 16px) clamp(20px, 3vw, 30px);
      border: none;
      border-radius: 50px;
      font-size: clamp(0.85rem, 2vw, 1rem);
      font-weight: 600;
      text-decoration: none;
      text-align: center;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
      position: relative;
      overflow: hidden;
      display: inline-block;
      min-width: 120px;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }
    
    .btn-secondary {
      background: transparent;
      color: #667eea;
      border: 2px solid #667eea;
    }
    
    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    .btn-primary:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
    }
    
    .btn-secondary:hover {
      background: #667eea;
      color: white;
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    
    /* Enhanced Empty State */
    .empty-state {
      text-align: center;
      padding: clamp(60px, 8vw, 120px) 20px;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 25px;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      animation: fadeInUp 1s ease-out 0.5s both;
    }
    
    .empty-state h2 {
      font-size: clamp(2rem, 4vw, 3rem);
      margin-bottom: 20px;
      color: #333;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .empty-state p {
      font-size: clamp(1rem, 2vw, 1.2rem);
      color: #666;
      margin-bottom: 30px;
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
    }
    
    .empty-state .btn {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 15px 30px;
      font-size: 1.1rem;
    }
    
    /* Enhanced Admin Link */
    .admin-link {
      display: inline-block;
      margin-top: 20px;
      padding: 12px 25px;
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      text-decoration: none;
      border-radius: 50px;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }
    
    .admin-link:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 25px rgba(40, 167, 69, 0.4);
    }
    
    /* Enhanced Floating Elements */
    .floating-element {
      position: absolute;
      width: 100px;
      height: 100px;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
      border-radius: 50%;
      animation: float 6s ease-in-out infinite;
      pointer-events: none;
    }
    
    .floating-element:nth-child(1) {
      top: 20%;
      left: 10%;
      animation-delay: 0s;
    }
    
    .floating-element:nth-child(2) {
      top: 60%;
      right: 15%;
      animation-delay: 2s;
    }
    
    .floating-element:nth-child(3) {
      bottom: 20%;
      left: 20%;
      animation-delay: 4s;
    }
    
    /* Enhanced Animations */
    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-50px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(50px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }
    
    @keyframes float {
      0%, 100% {
        transform: translateY(0px) rotate(0deg);
      }
      33% {
        transform: translateY(-20px) rotate(120deg);
      }
      66% {
        transform: translateY(10px) rotate(240deg);
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
        opacity: 1;
      }
      50% {
        transform: scale(1.05);
        opacity: 0.8;
      }
    }
    
    @keyframes slideInLeft {
      from {
        opacity: 0;
        transform: translateX(-100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    /* Enhanced Responsive Design */
    @media (max-width: 1024px) {
      .products-grid {
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 25px;
      }
      
      .product-card {
        margin-bottom: 20px;
      }
    }
    
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
        padding: 20px;
      }
      
      .desktop-nav {
        display: none;
      }
      
      .menu-toggle {
        display: flex;
      }
      
      .products-grid {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-top: 30px;
      }
      
      .product-image-container {
        height: 250px;
      }
      
      .product-content {
        padding: 20px;
      }
      
      .product-actions {
        flex-direction: column;
        align-items: center;
      }
      
      .btn {
        width: 100%;
        max-width: 200px;
      }
    }
    
    @media (max-width: 480px) {
      .products-grid {
        grid-template-columns: 1fr;
        gap: 20px;
      }
      
      .product-image-container {
        height: 220px;
      }
      
      .product-content {
        padding: 18px;
      }
      
      .product-actions {
        gap: 12px;
      }
      
      .btn {
        padding: 14px 20px;
        font-size: 0.9rem;
      }
      
      .empty-state {
        padding: 40px 20px;
      }
      
      .search-filters {
        gap: 8px;
      }
      
      .filter-input {
        min-width: 150px;
        padding: 8px 12px;
      }
    }
    
    /* Enhanced Loading States */
    .loading-skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      border-radius: 8px;
    }
    
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    
    /* Enhanced Scroll Animations */
    .scroll-trigger {
      opacity: 0;
      transform: translateY(30px);
      transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .scroll-trigger.visible {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* Enhanced Hover Effects */
    .product-card:hover .product-image-container::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
      z-index: 1;
      animation: pulse 2s infinite;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Floating Background Elements -->
    <div class="floating-element"></div>
    <div class="floating-element"></div>
    <div class="floating-element"></div>
    
    <header>
      <h1>Our Products</h1>
      
      <!-- Enhanced Search Bar -->
      <div class="search-container">
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder="Search products..." class="search-input">
          <button class="search-btn" onclick="performSearch()">
            <span class="search-icon">🔍</span>
          </button>
        </div>
        <div class="search-filters">
          <input type="number" id="minPrice" placeholder="Min Price" class="filter-input">
          <input type="number" id="maxPrice" placeholder="Max Price" class="filter-input">
          <button class="filter-btn" onclick="applyFilters()">Apply Filters</button>
          <button class="clear-btn" onclick="clearFilters()">Clear</button>
        </div>
      </div>
      
      <nav class="desktop-nav">
        <a href="/">Home</a>
        <a href="/products">Products</a>
        <a href="/cart" class="cart-link">
          🛒 Cart
          <span class="cart-badge" id="cartBadge">0</span>
        </a>
        <% if (typeof user !== 'undefined' && user) { %>
          <a href="/logout">Logout</a>
          <% if (user.isAdmin) { %>
            <a href="/admin">Admin</a>
          <% } %>
        <% } else { %>
          <a href="/login">Login</a>
          <a href="/signup">Sign Up</a>
        <% } %>
      </nav>
      <div class="menu-toggle" id="menuToggle">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </header>

    <nav id="mobileNav">
      <a href="/">Home</a>
      <a href="/products">Products</a>
      <a href="/cart" class="cart-link">
        🛒 Cart
        <span class="cart-badge" id="cartBadgeMobile">0</span>
      </a>
      <% if (typeof user !== 'undefined' && user) { %>
        <a href="/logout">Logout</a>
        <% if (user.isAdmin) { %>
          <a href="/admin">Admin</a>
        <% } %>
      <% } else { %>
        <a href="/login">Login</a>
        <a href="/signup">Sign Up</a>
      <% } %>
    </nav>

    <main>
      <!-- Search Results Header -->
      <div class="search-results-header" id="searchResultsHeader" style="display: none;">
        <h2 id="searchResultsTitle">Search Results</h2>
        <p id="searchResultsCount"></p>
        <button class="clear-search-btn" onclick="clearSearch()">Clear Search</button>
      </div>
      
      <% if (posts && posts.length > 0) { %>
        <div class="products-grid" id="productsGrid">
          <% posts.forEach((post, index) => { %>
            <article class="product-card scroll-trigger" data-delay="<%= index * 100 %>" data-product-id="<%= post.id %>">
              <div class="product-image-container">
                <% if (post.images && post.images.length > 0) { %>
                  <img src="<%= post.images[0] %>" alt="<%= post.name %>" loading="lazy">
                <% } else if (post.videos && post.videos.length > 0) { %>
                  <video autoplay muted loop>
                    <source src="<%= post.videos[0] %>" type="video/mp4">
                  </video>
                <% } else { %>
                  <div style="background: linear-gradient(135deg, #667eea, #764ba2); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; font-size: 1.2rem;">
                    <p>Premium Design</p>
                  </div>
                <% } %>
                
                <div class="image-overlay">
                  <div class="overlay-content">
                    <h3><%= post.name %></h3>
                    <p>Discover the perfect blend of style and functionality</p>
                  </div>
                </div>
              </div>
              
              <div class="product-content">
                <h3><%= post.name %></h3>
                <p class="product-description"><%= post.description %></p>
                <div class="product-price">$<%= (typeof post.price === 'number' ? post.price.toFixed(2) : post.price) %></div>
                
                <div class="product-actions">
                  <button class="btn btn-primary add-to-cart-btn" onclick="addToCart('<%= post.id %>')">
                    <span class="btn-text">Add to Cart</span>
                    <span class="btn-loading" style="display: none;">Adding...</span>
                  </button>
                  <a href="/product/<%= post.id %>" class="btn btn-secondary">View Details</a>
                </div>
              </div>
            </article>
          <% }); %>
        </div>
      <% } else { %>
        <div class="empty-state">
          <h2>No Products Available</h2>
          <p>We're currently updating our product catalog. Check back soon for amazing new products!</p>
          <% if (typeof user !== 'undefined' && user && user.isAdmin) { %>
            <a href="/admin" class="admin-link">Add Products</a>
          <% } %>
        </div>
      <% } %>
    </main>
  </div>

  <script>
    // Session Cookie Management - Copy session to admin section
    (function() {
      // Function to get session cookie
      function getSessionCookie() {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
          const [name, value] = cookie.trim().split('=');
          if (name === 'connect.sid') {
            return { name, value };
          }
        }
        return null;
      }
      
      // Function to copy session to admin section
      function copySessionToAdmin() {
        const sessionCookie = getSessionCookie();
        if (sessionCookie) {
          // Store in localStorage for admin section access
          localStorage.setItem('adminSessionCookie', JSON.stringify(sessionCookie));
          
          // Also try to send to admin section via postMessage if it's open
          if (window.opener && window.opener.location.href.includes('/admin')) {
            window.opener.postMessage({
              type: 'SESSION_COPY',
              session: sessionCookie
            }, '*');
          }
          
          // Log for debugging
          console.log('Session cookie copied:', sessionCookie.name);
        }
      }
      
      // Copy session on any click anywhere on the page
      document.addEventListener('click', function(e) {
        copySessionToAdmin();
      }, { passive: true });
      
      // Copy session on page load
      document.addEventListener('DOMContentLoaded', function() {
        copySessionToAdmin();
      });
      
      // Copy session on page visibility change
      document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
          copySessionToAdmin();
        }
      });
      
      // Copy session periodically (every 30 seconds)
      setInterval(copySessionToAdmin, 30000);
    })();
    
    // Enhanced mobile menu toggle with animations
    const menuToggle = document.getElementById('menuToggle');
    const mobileNav = document.getElementById('mobileNav');
    
    if (menuToggle && mobileNav) {
      menuToggle.addEventListener('click', function() {
        this.classList.toggle('active');
        mobileNav.classList.toggle('active');
        document.body.classList.toggle('menu-open');
        
        // Add ripple effect
        const ripple = document.createElement('div');
        ripple.style.position = 'absolute';
        ripple.style.width = '100px';
        ripple.style.height = '100px';
        ripple.style.background = 'rgba(102, 126, 234, 0.3)';
        ripple.style.borderRadius = '50%';
        ripple.style.transform = 'scale(0)';
        ripple.style.animation = 'ripple 0.6s linear';
        ripple.style.left = '50%';
        ripple.style.top = '50%';
        ripple.style.marginLeft = '-50px';
        ripple.style.marginTop = '-50px';
        
        this.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', function(e) {
        if (mobileNav.classList.contains('active') && 
            !mobileNav.contains(e.target) && 
            !menuToggle.contains(e.target)) {
          menuToggle.classList.remove('active');
          mobileNav.classList.remove('active');
          document.body.classList.remove('menu-open');
        }
      });
    }
    
    // Enhanced search functionality
    let currentSearchResults = [];
    let currentFilters = {};
    
    async function performSearch() {
      const query = document.getElementById('searchInput').value.trim();
      const minPrice = document.getElementById('minPrice').value;
      const maxPrice = document.getElementById('maxPrice').value;
      
      if (!query && !minPrice && !maxPrice) {
        clearSearch();
        return;
      }
      
      try {
        const params = new URLSearchParams();
        if (query) params.append('q', query);
        if (minPrice) params.append('minPrice', minPrice);
        if (maxPrice) params.append('maxPrice', maxPrice);
        
        const response = await fetch(`/api/search?${params.toString()}`);
        const data = await response.json();
        
        if (data.results) {
          displaySearchResults(data.results, query, data.total);
          currentSearchResults = data.results;
          currentFilters = { query, minPrice, maxPrice };
        }
      } catch (error) {
        console.error('Search error:', error);
        alert('Search failed. Please try again.');
      }
    }
    
    function displaySearchResults(results, query, total) {
      const productsGrid = document.getElementById('productsGrid');
      const searchHeader = document.getElementById('searchResultsHeader');
      const searchTitle = document.getElementById('searchResultsTitle');
      const searchCount = document.getElementById('searchResultsCount');
      
      // Update search header
      searchTitle.textContent = query ? `Search Results for "${query}"` : 'Filtered Results';
      searchCount.textContent = `Found ${total} product${total !== 1 ? 's' : ''}`;
      searchHeader.style.display = 'block';
      
      // Clear current products
      productsGrid.innerHTML = '';
      
      if (results.length === 0) {
        productsGrid.innerHTML = `
          <div class="empty-state">
            <h2>No Products Found</h2>
            <p>Try adjusting your search terms or filters.</p>
            <button class="clear-search-btn" onclick="clearSearch()">Clear Search</button>
          </div>
        `;
        return;
      }
      
      // Display search results with animations
      results.forEach((product, index) => {
        const productCard = createProductCard(product, index);
        productsGrid.appendChild(productCard);
        
        // Staggered animation
        setTimeout(() => {
          productCard.classList.add('visible');
        }, index * 100);
      });
    }
    
    function createProductCard(product, index) {
      const card = document.createElement('article');
      card.className = 'product-card scroll-trigger';
      card.setAttribute('data-delay', index * 100);
      card.setAttribute('data-product-id', product.id);
      card.style.opacity = '0';
      card.style.transform = 'translateY(50px)';
      card.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
      
      card.innerHTML = `
        <div class="product-image-container">
          ${product.images && product.images.length > 0 
            ? `<img src="${product.images[0]}" alt="${product.name}" loading="lazy">`
            : `<div style="background: linear-gradient(135deg, #667eea, #764ba2); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; font-size: 1.2rem;">
                 <p>Premium Design</p>
               </div>`
          }
          <div class="image-overlay">
            <div class="overlay-content">
              <h3>${product.name}</h3>
              <p>Discover the perfect blend of style and functionality</p>
            </div>
          </div>
        </div>
        
        <div class="product-content">
          <h3>${product.name}</h3>
          <p class="product-description">${product.description}</p>
          <div class="product-price">$${typeof product.price === 'number' ? product.price.toFixed(2) : product.price}</div>
          
          <div class="product-actions">
            <button class="btn btn-primary add-to-cart-btn" onclick="addToCart('${product.id}')">
              <span class="btn-text">Add to Cart</span>
              <span class="btn-loading" style="display: none;">Adding...</span>
            </button>
            <a href="/product/${product.id}" class="btn btn-secondary">View Details</a>
          </div>
        </div>
      `;
      
      // Add event listeners
      addProductCardInteractions(card);
      
      return card;
    }
    
    function clearSearch() {
      document.getElementById('searchInput').value = '';
      document.getElementById('minPrice').value = '';
      document.getElementById('maxPrice').value = '';
      document.getElementById('searchResultsHeader').style.display = 'none';
      
      // Reload original products
      location.reload();
    }
    
    function applyFilters() {
      performSearch();
    }
    
    function clearFilters() {
      document.getElementById('minPrice').value = '';
      document.getElementById('maxPrice').value = '';
      if (currentSearchResults.length > 0) {
        performSearch();
      }
    }
    
    // Enhanced cart functionality
    async function addToCart(productId) {
      const button = event.target.closest('.add-to-cart-btn');
      const btnText = button.querySelector('.btn-text');
      const btnLoading = button.querySelector('.btn-loading');
      
      // Show loading state
      button.classList.add('loading');
      
      try {
        const response = await fetch('/api/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId, quantity: 1 })
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // Success animation
          button.classList.remove('loading');
          button.classList.add('success');
          btnText.textContent = 'Added!';
          
          // Update cart badge
          updateCartBadge(data.cart);
          
          // Reset button after delay
          setTimeout(() => {
            button.classList.remove('success');
            btnText.textContent = 'Add to Cart';
          }, 2000);
          
          // Show success message
          showNotification('Product added to cart!', 'success');
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        
        // Reset button
        button.classList.remove('loading');
        btnText.textContent = 'Add to Cart';
        
        showNotification('Failed to add product to cart', 'error');
      }
    }
    
    function updateCartBadge(cart) {
      const cartCount = cart.reduce((total, item) => total + item.quantity, 0);
      
      // Update both desktop and mobile badges
      const desktopBadge = document.getElementById('cartBadge');
      const mobileBadge = document.getElementById('cartBadgeMobile');
      
      if (desktopBadge) desktopBadge.textContent = cartCount;
      if (mobileBadge) mobileBadge.textContent = cartCount;
      
      // Animate badge update
      [desktopBadge, mobileBadge].forEach(badge => {
        if (badge) {
          badge.style.transform = 'scale(1.3)';
          setTimeout(() => {
            badge.style.transform = 'scale(1)';
          }, 200);
        }
      });
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 10px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        box-shadow: 0 5px 20px rgba(0,0,0,0.2);
        max-width: 300px;
      `;
      
      // Set background based on type
      if (type === 'success') {
        notification.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
      } else if (type === 'error') {
        notification.style.background = 'linear-gradient(135deg, #dc3545, #c82333)';
      } else {
        notification.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
      }
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      // Remove after delay
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
    
    // Enhanced product card interactions
    function addProductCardInteractions(card) {
      // Add 3D tilt effect on mouse move
      card.addEventListener('mousemove', function(e) {
        const rect = this.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 15;
        const rotateY = (centerX - x) / 15;
        
        this.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateY(-15px) scale(1.02)`;
      });
      
      // Reset transform on mouse leave
      card.addEventListener('mouseleave', function() {
        this.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateY(0) scale(1)';
      });
      
      // Add click ripple effect
      card.addEventListener('click', function(e) {
        if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') return;
        
        const ripple = document.createElement('div');
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.position = 'absolute';
        ripple.style.width = size + 'px';
        ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        ripple.style.background = 'rgba(102, 126, 234, 0.3)';
        ripple.style.borderRadius = '50%';
        ripple.style.transform = 'scale(0)';
        ripple.style.animation = 'ripple 0.6s linear';
        ripple.style.pointerEvents = 'none';
        
        this.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    }
    
    // Enhanced scroll animations with staggered delays
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const delay = entry.target.getAttribute('data-delay') || 0;
          setTimeout(() => {
            entry.target.classList.add('visible');
          }, parseInt(delay));
        }
      });
    }, { 
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Observe all product cards
    document.querySelectorAll('.product-card').forEach(card => {
      observer.observe(card);
    });
    
    // Enhanced product card interactions
    document.querySelectorAll('.product-card').forEach(card => {
      addProductCardInteractions(card);
    });
    
    // Enhanced image loading with skeleton
    document.querySelectorAll('.product-image-container img').forEach(img => {
      img.addEventListener('load', function() {
        this.style.opacity = '1';
        this.style.transform = 'scale(1)';
      });
      
      img.addEventListener('error', function() {
        this.style.display = 'none';
        const fallback = document.createElement('div');
        fallback.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
        fallback.style.width = '100%';
        fallback.style.height = '100%';
        fallback.style.display = 'flex';
        fallback.style.alignItems = 'center';
        fallback.style.justifyContent = 'center';
        fallback.style.color = 'white';
        fallback.style.fontSize = '1.2rem';
        fallback.textContent = 'Image Unavailable';
        this.parentNode.appendChild(fallback);
      });
    });
    
    // Enhanced scroll performance
    let ticking = false;
    
    function updateScrollAnimations() {
      if (!ticking) {
        requestAnimationFrame(() => {
          document.querySelectorAll('.scroll-trigger').forEach(trigger => {
            const rect = trigger.getBoundingClientRect();
            const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
            
            if (isVisible) {
              trigger.classList.add('visible');
            }
          });
          ticking = false;
        });
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', updateScrollAnimations);
    window.addEventListener('resize', updateScrollAnimations);
    
    // Initialize animations
    updateScrollAnimations();
    
    // Enhanced button hover effects
    document.querySelectorAll('.btn').forEach(btn => {
      btn.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-3px) scale(1.05)';
      });
      
      btn.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0) scale(1)';
      });
    });
    
    // Add CSS for ripple animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes ripple {
        to {
          transform: scale(4);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
    
    // Enhanced page load animation
    window.addEventListener('load', function() {
      document.body.style.opacity = '0';
      document.body.style.transition = 'opacity 0.5s ease';
      
      setTimeout(() => {
        document.body.style.opacity = '1';
      }, 100);
      
      // Load initial cart count
      updateInitialCartCount();
    });
    
    // Load initial cart count
    async function updateInitialCartCount() {
      try {
        const response = await fetch('/api/cart');
        if (response.ok) {
          const data = await response.json();
          updateCartBadge(data.cart);
        }
      } catch (error) {
        console.error('Error loading cart count:', error);
      }
    }
    
    // Search on Enter key
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        performSearch();
      }
    });
    
    // Real-time search (optional - can be removed for performance)
    let searchTimeout;
    document.getElementById('searchInput').addEventListener('input', function() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        if (this.value.trim().length > 2) {
          performSearch();
        }
      }, 500);
    });
  </script>
</body>
</html>